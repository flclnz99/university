version: '3.7'
services:


  mongoDB:
    image: mongo
    container_name: mongoDB
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
    networks:
      - mynetwork


 #######################################
  # Mongo express
  #######################################

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
      - ME_CONFIG_MONGODB_SERVER=mongoDB

    depends_on:
      - mongoDB
    networks:
      - mynetwork


  #######################################
  # API GATEWAY
  #######################################

  api-gateway-service:
    container_name: api-gateway-service
    build:
      context: ../api-gateway-service
      dockerfile: Dockerfile
    image: api-gateway-service
    ports:
      - "8080:8080"
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka/
    depends_on:
      - discovery-service
    restart: always
    networks:
      - mynetwork




 #######################################
  # discovery-service
  #######################################

  discovery-service:
    container_name: discovery-service
    build:
      context: ../discovery-service
      dockerfile: Dockerfile
    image: discovery-service:latest
    ports:
      - "8761:8761"
    restart: always
    networks:
      - mynetwork


  #######################################
  # chat-service container
  #######################################

  chat-service:
    container_name: chat-service
    build:
      dockerfile: Dockerfile
    image: chat-service:latest
    ports:
      - "8091:8091"
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka/
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    networks:
      - mynetwork
    depends_on:
      - discovery-service
      - mongoDB
    restart: always


volumes:
  mongodata:
  persistent:

networks:
  mynetwork:
    driver: bridge






# PER ACCEDERE A MYSQL DA PHPMYADMIN:

# SPIEGAZIONE
# per creare tutti i container e lanciare il progetto:
# prima creare una network nuova con "docker network create mynetwork"
# dopo lanciare il comando: sudo docker-compose -f docker-compose.yml up --force-recreate -V
# per stoppare tutto usare: docker-compose -f docker-compose.yml down


# localhost:80
# Username:   root
# Password:   test


# Se non si riescono a chiudere i container
# sudo systemctl stop docker.socket
# sudo systemctl stop docker
# sudo systemctl restart docker
