version: '3.7'

services:


  #######################################
  # MYSQL DBMS
  #######################################
  
  mysqlDB:
    image: mysql:8.0
    container_name: mysqlDB
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ricerca
      MYSQL_DATABASE: Taass_Db
      MYSQL_USER: aclm
      MYSQL_PASSWORD: ricerca_Taass
    volumes:
      - persistent:/var/lib/mysql
    restart: always
    networks:
      - mynetwork


  mysqlAuthDB:
    image: mysql:8.0
    container_name: mysqlAuthDB
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: AuthDB
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
    volumes:
      - mysqldataauth:/var/lib/mysql
    restart: always
    networks:
      - mynetwork


    #######################################
    # PHP MY ADMIN
    #######################################

#  phpmyadmin:
#    image: phpmyadmin
#    container_name: phpmyadmin
#    links:
#      - mysqlDB:mysqlDB
#    ports:
#      - "80:80"
#    environment:
#      MYSQL_USER: aclm
#      MYSQL_PASSWORD: ricerca_Taass
#      MYSQL_ROOT_PASSWORD: ricerca
#      PMA_HOST: mysqlDB
#    networks:
#      - mynetwork
#    depends_on:
#      - mysqlDB



 #######################################
  # mongoDB
 #######################################

  mongoShopDB:
    image: mongo
    container_name: mongoShopDB
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - mongodatashop:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
    networks:
      - mynetwork

  mongoDB:
    image: mongo
    container_name: mongoDB
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodatachat:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
    networks:
      - mynetwork


  #######################################
  # Mongo express
  #######################################

  # mongo-express-shop:
  #   image: mongo-express
  #   container_name: mongo-express-shop
  #   restart: always
  #   ports:
  #     - "8082:8081"
  #   environment:
  #     - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
  #     - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
  #     - ME_CONFIG_MONGODB_SERVER=mongoShopDB
  #   depends_on:
  #     - mongoShopDB
  #   networks:
  #     - mynetwork


  # mongo-express:
  #   image: mongo-express
  #   container_name: mongo-express
  #   restart: always
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
  #     - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
  #     - ME_CONFIG_MONGODB_SERVER=mongoDB

  #   depends_on:
  #     - mongoDB
  #   networks:
  #     - mynetwork

#######################################
  # discovery-service
#######################################

  discovery-service:
    container_name: discovery-service
    build:
      context:  Back-end/discovery-service
      dockerfile: Dockerfile
    image: discovery-service:latest
    ports:
      - "8761:8761"
    restart: always
    networks:
      - mynetwork


  #######################################
  # API GATEWAY
  #######################################

  api-gateway-service:
    container_name: api-gateway-service
    build:
      context: Back-end/api-gateway-service
      dockerfile: Dockerfile
    image: api-gateway-service
    ports:
      - "8080:8080"
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka/
    depends_on:
      - discovery-service
    restart: always
    networks:
      - mynetwork




  #######################################
  # auth-service container
  #######################################

  auth-service:
    container_name: auth-service
    build:
      context: Back-end/auth-service
      dockerfile: Dockerfile
    image: auth-service:latest
    ports:
      - "8090:8090"
    networks:
      - mynetwork
    restart: always
    depends_on:
      - mysqlAuthDB


  #######################################
  # chat-service container
  #######################################

  chat-service:
    container_name: chat-service
    build:
      context: Back-end/chat-service
      dockerfile: Dockerfile
    image: chat-service:latest
    ports:
      - "8091:8091"
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka/
    networks:
      - mynetwork
    depends_on:
      - discovery-service
      - mongoDB

    restart: always



  #######################################
  # music-service container
  #######################################

  music-service:
    container_name: music-service
    build:
      context: Back-end/music-service
      dockerfile: Dockerfile
    image: music-service
    ports:
      - "8092:8092"
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka/
    depends_on:
      - discovery-service
    restart: always
    networks:
      - mynetwork


  #######################################
  # shop-service container
  #######################################

  shop-service:
    container_name: shop-service
    build:
      context: Back-end/shop-service
      dockerfile: Dockerfile
    image: shop-service:latest
    ports:
      - "8093:8093"
    environment:
      - EUREKA_SERVER=http://discovery-service:8761/eureka/
    networks:
      - mynetwork
    depends_on:
      - discovery-service
      - mongoShopDB
    restart: always



  #######################################
  # front-end-service container
  #######################################

  front-end-container:
    container_name: front-end-container
    build:
      context: ./Front-end
      dockerfile: Dockerfile
    image: front-end-container:latest
    networks:
      - mynetwork
    ports:
      - "5173:5173"
    restart: always


volumes:
  mongodatashop:
  mongodatachat:
  persistent:
  mysqldataauth:


networks:
  mynetwork:
    driver: bridge

