WEBSOCKET

Websocket è un protocollo di rete che consente di stabilire una connessione di tipo permanente
tra un client e un server. Diversamente da HTTP, una volta risposto ad un messaggio il canale di
comunicazione aperto non viene cancellato, quindi, client e server possono scambiarsi dati usando
un canale bidirezionale, il websocket...
Quando uno dei due chiude il canale dal suo lato, la comunicazione viene cancellata.


Vantaggi:
- Websocket permette uno scambio di dati in realtime
- Websocket crea una connessione di tipo bidirezionale. Quindi client e server possono comunicare sullo
    stesso canale
- Va bene per quelle applicazioni dove è necessario tenere un certo traffico di dati, come lo streaming
- La connessione di tipo permanente riduce la latenza nel traffico dei dati


SVANTAGGI:
- Non va bene per applicazioni non in tempo reale
- Consuma molte risorse


USI:
- chat application realtime
- realtime gaming

Esempio:
    In una chatroom, un client apre un websocket con un websocket message broker e invia un messaggio.
    Connessi con il server ci sono diversi utenti. Ognuno di questi mantiene attivo un
    canale websocket... Il server cattura il primo messaggio, quindi lo inoltra a tutti gli
    altri client connessi...

    Message Broker:
        Il message broker è un server che ascolta i messaggi dei client sulle websocket e
        risponde agli altri client... Quindi si occupa di fare l'intermediario di una
        comunicazione...


CONFUGURATION:

Su java spring, creare una classe configuration...
Questa classe serverà per abilitare il websocket message broker. Quindi la classe implementa
un websocketMessageBrokerConfigurer.
I metodi da ridefinire sono:
    - registerStompEndpoints:   qui vogliamo aggiungere un webpoint STOMP.
                                In questo modo configuriamo il path a cui il message brocker
                                riceverà delle richieste di apertura di un canale websocket
                                tramite il protocollo STOMP

    - configureMessageBrocker:  Questo ci permette di abilitare un messagebrocker.
                                Impostiamo il path su cui si dichiara il messageBrocker
                                Impostiamo enableSimpleBroker, in cui


Creiamo una seconda classe Configuration, in cui impostiamo tutti gli event listener che
ci servono per catturare eventi come: Connesso client, disconnesso client.. ecc


CHATCONTROLLER:

Creiamo 2 metodi:
    - sendmessage:
    Per inoltrare un messaggio...
    usa @MessageMapping per indicare l'url per invocare questo specifico metodo
    usa @sendTo per indicare a quale topic vogliamo inoltrare questo messaggio... Il topic lo abbiamo
    specificato nel WebSocketConfig, quando diciamo che il messageBroker si abilita ad ascoltare i
    messaggi inoltrati su un topic.

    Quindi ogni volta che inviamo un messaggio sul path di @MessageMapping, il suo payload lo
    inoltriamo su \topic\public


